/**

 我们知道,设计模式很有用,学好设计模式不但能让你写出更简洁,优雅的代码,还能使得代码的结构更清晰,也更有利于扩展

 当然设计模式也不是万能的,一成不变的.设计模式只是前人总结出来的一种经验,一种特定问题的解决方法,不能看作是死的东西

 不一定非要生搬硬套,非得按照设计模式书上来来,只要我们写的代码符合一定的一些原则,一样可以看作是自己的模式.但是前人

 总结出来的东西必须非常值得我们学的.本系列23种设计模式会用最简单的例子,会用最让人明白的语言讲清楚里面的思想即可,

 过多的细节不会涉及,本系列所有的代码有的是自己写的,有的例子是看书得来的或者看

 其它博客学习来的,只供参考学习之用,所有的代码全部在github上,稍后会列出地址,供下载学习参考.

 在讲设计模式之前,先讲一下代码编写的一些基本的原则

 一　单一职责原则

 　　优化代码的第一步:就是类或者方法的职责只做一件事
 二　开闭原则

 　　让程序更稳定,更灵活:对扩展开放,对修改关闭,什么意思呢?
 　　就是如果我加一个功能,可以不用修改原来的老代码,直接添加新的功能即可.不修改老的代码,就是对修改养老,直接添加新的代码,就是对扩展开放.

 　　直接添加新的代码,不用修改老代码就可以完成软件功能的扩展,这样会减少出错的可能,提高系统的稳定性

 三　里氏替换原则

 　　构建扩展性更好的系统:由于是一位姓里的女士提出来的所以就叫做里氏替换原则,说白了就是所有引用基类的地方也可以换成子类.
 　　我们知道面向对象的三大特点是继承,封装,多态.里氏替换的原则就是基于继承和多态.

 四   依赖倒置原则

 　　让项目拥有变化的能力:有三个特点

 高层模块不应该依赖低层模块，两者都应该依赖其抽象；
 抽象不应该依赖细节；
 细节应该依赖抽象。
 五   接口隔离原则　　

 　　让系统有更高的灵活性:让客户端不应该依赖于它不需要的接口,就是让客户端依赖的接口尽可能的小.

 六　迪米特原则

 　　让系统有更好的扩展性:一个对象应该对其它对象有最少的了解.通俗的讲,一个类应该对自己需要耦合或者调用的类知道的最少

 　　类的内部如何实现与调用者或者依赖者没有关系.



 *
 */

